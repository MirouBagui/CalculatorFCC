{"version":3,"sources":["store.js","initialState.js","components/Button.jsx","components/Input.jsx","components/ClearButton.jsx","components/Operator.jsx","App.js","reportWebVitals.js","index.js","actions/index.js"],"names":["options","Immer","useGlobal","globalHook","numbers","nine","eight","seven","six","five","four","one","two","three","zero","decimal","operation","clear","add","subtract","multiply","equals","divide","calc","lastPressed","evaluate","actions","mapState","state","mapActions","handleClick","Button","digits","Object","entries","map","key","value","className","id","onClick","Input","console","log","ClearButton","Operator","operator","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","store","values","setState","evaluated","eval","splitted","split","last","slice","includes","e","undefined","lastNumberIdx","reverse","findIndex","char","length"],"mappings":"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","file":"static/js/main.1a792eda.chunk.js","sourcesContent":["import Immer from \"immer\";\nimport globalHook from \"use-global-hook\";\nimport * as actions from \"./actions\";\nimport { initialState } from \"./initialState\";\n\n//Add Immer lib to your options to use Immer setState functions\nconst options = {\n  Immer\n};\n\nconst useGlobal = globalHook(initialState, actions, options);\n\nexport default useGlobal;\n","export const initialState = {\n    numbers : [\n        {\n        nine:9,\n        eight:8,\n        seven:7,\n        six:6,\n        five:5,\n        four:4,\n        one:1,\n        two:2,\n        three:3,\n        zero:0,\n        decimal:\".\",\n        }\n    ],\n    \n    operation: [\n        {\n        clear:\"C\",\n        add:\"+\",\n        subtract:\"-\",\n        multiply:\"*\",\n        equals:\"=\",\n        divide:\"/\",\n    }],\n    calc: '0',\n    lastPressed: '',\n    evaluate: false\n}","import React, {useState} from 'react';\nimport useGlobal from \"../store\";\n\nconst mapState = (state) => state;\n\nconst mapActions = (actions) => ({\n    handleClick: actions.handleClick\n})\n\nconst Button = () => {  \n\n    const [state] = useGlobal(mapState);\n    const numbers = state.numbers[0];\n    const [, actions] = useGlobal(null, mapActions);\n\n    const digits = Object.entries(numbers).map(\n        ([key,value]) => (  \n        <div className='btn' id={`${key}`} key={key} \n            onClick={\n                () => actions.handleClick(value)\n            }>\n            {value}\n            </div> ));\n    return(\n        <> \n            {digits}\n        </>\n    )\n}\n\nexport default Button;\n","import React from 'react';\nimport useGlobal from \"../store\";\n\nconst mapState = (state) => state;\n\nconst Input = () =>  {\n    const [state] = useGlobal(mapState);\n    let calc = state.calc;\n    let evaluate = state.evaluate;\n    console.log(evaluate)\n    return (\n        <div className={evaluate ? \"input evaluate\" : \"input\"} id=\"display\">\n            {calc}\n        </div>\n    )\n}\n\nexport default Input;\n","import React from 'react';\n\nconst ClearButton = () => {\n    return (\n        <div>\n            \n        </div>\n    );\n}\n\nexport default ClearButton;\n","import React, {useState} from 'react';\nimport useGlobal from \"../store\";\n\nconst mapState = (state) => state;\n\nconst mapActions = (actions) => ({\n    handleClick: actions.handleClick\n})\n\nconst Operator = () => {  \n\n    const [state] = useGlobal(mapState);\n    const operator = state.operation[0];\n    const [, actions] = useGlobal(null, mapActions);\n\n    const operation = Object.entries(operator).map(\n        ([key,value]) => ( \n        <div className=\"btn\" id={key} key={key} \n            onClick={() => actions.handleClick(value)\n                }>\n        {value}\n         </div> ));\n    return(\n        <> \n            {operation}\n        </>\n    )\n}\n\nexport default Operator;\n","import React,{useState} from 'react';\nimport './App.scss';\nimport Button from './components/Button'\nimport Input from './components/Input'\nimport ClearButton from './components/ClearButton'\nimport Operator from './components/Operator'\n\n\nfunction App() {\n\n  \n\n\n  return (\n    <div className=\"container\">\n      <div className=\"calculator\">\n        <Input  />\n        <div className=\"row\">\n          <Operator />\n          <Button  />\n        </div>\n        <ClearButton />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// thanx to florin for the function https://codepen.io/FlorinPop17/pen/KKpXqJd\nconst handleClick = (store,value) => {\n  let { calc, lastPressed, operation, numbers, evaluate } = store.state;\n  operation = Object.values(operation[0])\n  numbers = Object.values(numbers[0])\n  switch(value) {\n    case 'C': {\n      store.setState({\n        calc: '0',\n        evaluate: false,\n      });\n      break;\n    }\n      \n    case '=': {\n      const evaluated = eval(calc);\n      store.setState({\n        calc: evaluated,\n        evaluate: true,\n      });\n      break;\n    }\n      \n    case '.': \n      const splitted = calc.split(/[\\+\\-\\*\\/]/);\n\n      const last = splitted.slice(-1)[0];\n      \n      if(!last.includes('.')) {\n        store.setState({\n          calc: calc+'.'\n        })\n      }\n      \n      break;\n    \n      \n    default: {\n      let e = undefined;\n      // check for other operations\n      if(operation.includes(value)) {\n        if(operation.includes(lastPressed) && value !== '-') {\n          // get the index of the last number and set a new operator\n          const lastNumberIdx = calc.split('').reverse()\n              .findIndex(char => char !== ' ' && numbers.includes(+char)); \n          e = calc.slice(0, calc.length - lastNumberIdx) + ` ${value} `;\n        } else {\n          e = `${calc} ${value} `;\n        }\n      } else {\n        e = (calc === '0') ? `${value}` : (calc + `${value}`);\n      }\n      \n      store.setState({\n        calc: e,\n        lastPressed: value,\n        evaluate: false,\n      });\n    }\n  \n}}\n\nexport {handleClick}"],"sourceRoot":""}